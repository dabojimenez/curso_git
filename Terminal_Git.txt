1) Usaremos como primer comando (git init), para poder indicar al proyecto que voy a usar git, que voy a poder controlar sus versiones, en pocas palabras inicializamos el repositorio
2) AHora nos creara una carpte oculta, llamada .git, la cual NO DEBEMOS MODIFICAR PARA NADA
3) El comando (git status), para poder ver el estado de nuestros archivos, nos indicara si tenemos archivos sin agregar al entrono que estaran de color rojo
o aun no hemos realizado en nuestro entorno de trabajo [staging area]
4) AHhora con el comando (git add <nombreArchivo>), estamos agregando dicho archivo a nuestra area de trabajo, y si ejecutamos (git status), el color de dicho archivo sera de color verde
Para evitar ejecutar cada momento (git add <nombreArchivo>), podemos ejecutar el siguiente comando (git add -A), ahora todos todosss los archivos estaran de color verde
5) COn el siguiente coamndo (git commit), creamos nuestro primer punto de control de nuestro codigo, PEROOOOOO primero debemos configurarlo
Git despues de ecribir el comando, nos pregunta que quien eres?, y nos da dos comandos basicos que debemos escribir para poder realizar nuestro commit
  git config --global user.email "tuCorreo@correo.com"    ---> Para configurar el correo
  git config --global user.name "Tu nombre"               ---> Para configurar el nombre
SI COMETIMOS UN ERROR, BASTA CON VOLVER A ESCRIBIR LA MISMA LINEA DE COMANDO PERO ESTA VEZ DE MANERA CORRECTA
6) Ahora, aparecera un editor de texto, practicamente la pantalla o el dise√±o cambiara, no te preocupes, aqui podras realziar o escribir un mensaje significativo que represente a tu commit
Si en caso estas en windows, linux o MacOS, y tienes un editor de texto llamado Viem, no te preocupes:
  NOTA: Si tecleas y no puedes escribir, preciona la letra i, para hacerlo
  i: si pulsas la letra (i), podras insertar texto o podras teclear tu mensaje
  Esc: Si pulsas la tecla (Esc), podras dejar de insertar tu texto, para consiguiente poder salir
  :wq : Si escibis (:wq), podras salir del editor de texto llamado Viem
6) Ahora con (git log), podremos ver de forma mucho mas extensa todos los commit que hemos realizado, si el caso fuera solo con la tecla (q) salimos
7) si escribirmos (git status), nos mostrara un mensaje indicanos que no hay archivos para poder realizar commit, pero si realizamos un cmabio en cualquier archivo
podremos usar el comando (git restore <nombreArchivo>), podremos ver de manera inmediata que dicho archivo regresara al punto donde se realizo el primer commit y se perdera dicho cambio si haberlo guardado
8) COn el comando (git diff <nombreArchivo>), nos mostrara la diferencia o los cambios relizados en dicho archivo
9) Ahora si tenemos archivos o carpetas que no queremos subir, que no queremos mostrar en nuestro repositorio, debemos crear un archivo llamado {.gitignore}
ahora si escribimos (git status), nos mostrara dicho archivo en rojo, nuestro {.gitignore}
10) Para evitar ingregsar a ese editor de texto y complicarnos todo, podemos ejecutar el siguiente comando (git commit -m "Mensaje significativo y sin interar al editor")
11) Con el comando (git branch), nos mostrara las ramas o los proyectos que tengo, y el nombre de color verde es el que nos indica sobre que branch estamos
12) Si queremos tener o sacar una rama, un proyecto que va atener otras caracteristicas, digitamos (git branch nombreBranche), y ahora tenemos una rama mas, tendremos otro poryecto
13) AHora para poder cmabiarnos de ramas o proyecto, digitamso el siguiente coamndo (git checkout nombreBranche), y automaticamente estaremos en dicha rama o ene l nombre de uestro branch o proyecto
